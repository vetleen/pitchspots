#from django.contrib.auth.models import User
#from django.contrib.auth import authenticate, login, logout

import json
from datetime import datetime  
from django.utils.timezone import utc
from ps_editor.models import Pitchspot, IntroModule

def set_date_now ():
    ''' Returns current date in UTC-format'''
    return datetime.utcnow().replace(tzinfo=utc)

def make_JSON_from_dict(pdict):
    JSON = json.dumps(pdict, sort_keys=True, indent=4, separators=(',', ': '))
    return JSON
        
def create_pitchspot(   title, 
                        owner, 
                        campaign_manager_firstname, 
                        campaign_manager_lastname,
                        call_to_action_text=None,
                        campaign_manager_organization=None, 
                        campaign_manager_title=None,
                        is_published=None,
                    ):
    '''
    Creates a pitchspot
    '''
    #Create the pitchspot with the required and automatic fields
    MyPitchspot = Pitchspot.objects.create( title=title, 
                                            owner=owner, 
                                            date_created=set_date_now(), 
                                            date_last_changed=set_date_now(),
                                            campaign_manager_firstname = campaign_manager_firstname,
                                            campaign_manager_lastname = campaign_manager_lastname,
                                          )

    MyPitchspot.admin.add(owner)

    #Save optional arguments if they are given
    if (call_to_action_text is not None and len(call_to_action_text)>=1):
        MyPitchspot.call_to_action_text = call_to_action_text
    if (campaign_manager_organization is not None and len(campaign_manager_organization)>=1):
        MyPitchspot.campaign_manager_organization = campaign_manager_organization
    if (campaign_manager_title is not None and len(campaign_manager_title)>=1):
        MyPitchspot.campaign_manager_title=campaign_manager_title
    if (is_published == "True" or is_published == "False"):
        MyPitchspot.is_published=is_published    
    MyPitchspot.save()

def create_intro_module(pitchspot, title, bodytext):
    ''' creates an intro_module that will be attached to a pitchspot '''
    #Update information about when the Pitchspot was last changed
    pitchspot.date_last_changed=set_date_now()
    pitchspot.save()
    ingress = None
    #Create the intro-module
    im = IntroModule.objects.create(pitchspot=pitchspot, title=title, bodytext=bodytext)
    if ingress is not None:
        im.ingress = ingress
    im.save()

                      
def get_intromodule_as_dict













































